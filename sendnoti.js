const fs = require('fs');
const axios = require('axios');
const path = require('path');

module.exports.config = {
    name: "sendnoti",
    version: "3.1.0",
    hasPermssion: 2,
    credits: "pcoder",
    description: "G·ª≠i tin nh·∫Øn + media t·ª´ admin t·ªõi to√†n b·ªô nh√≥m, h·ªó tr·ª£ ph·∫£n h·ªìi qua reply",
    commandCategory: "Ti·ªán √≠ch",
    usages: "[msg]",
    cooldowns: 5,
};

let atmDir = [];

/** 
 * T·∫£i file ƒë√≠nh k√®m v·ªÅ cache, tr·∫£ v·ªÅ m·∫£ng fs.ReadStream 
 * @param {Array} atm - Danh s√°ch attachment t·ª´ event.attachments
 * @param {String} body - N·ªôi dung ƒëi k√®m
 */
const getAtm = async (atm, body) => {
    let msg = { body }, attachment = [];
    for (let eachAtm of atm) {
        try {
            const url = eachAtm.url;
            const filename = eachAtm.filename || "attachment";
            const ext = path.extname(url.split("?")[0]) || ".dat";
            const savePath = path.join(__dirname, "cache", `${filename}${ext}`);
            const response = await axios.get(url, { responseType: 'stream' });
            await new Promise((res, rej) => {
                const writer = fs.createWriteStream(savePath);
                response.data.pipe(writer);
                writer.on('finish', res);
                writer.on('error', rej);
            });
            attachment.push(fs.createReadStream(savePath));
            atmDir.push(savePath);
        } catch (e) {
            console.log("L·ªói t·∫£i file ƒë√≠nh k√®m:", e);
        }
    }
    msg.attachment = attachment;
    return msg;
};

module.exports.handleReply = async function ({ api, event, handleReply, Users, Threads }) {
    const moment = require("moment-timezone");
    const gio = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY - HH:mm:ss");
    const { threadID, messageID, senderID, body } = event;
    let name = await Users.getNameUser(senderID);
    switch (handleReply.type) {
        case "sendnoti": {
            let text = `====== [ ùó£ùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂ ùòÅùòÇÃõÃÄ ùó®ùòÄùó≤ùóø ] ======\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äé‚è±„Äèùêìùê¢ùê¶ùêû: ${gio}\n„Äéüìù„ÄèùêçùêºÃ£ÃÇùêßùê†: ${body}\n„Äéüì©„Äèùêèùê°ùêöÃâùêß ùê°ùê®ÃÇÃÄùê¢ ùê≠ùêÆÃõÃÄ ùêîùê¨ùêûùê´: ${name}  ùíïùíìùíêùíèùíà ùíèùíâùíêÃÅùíé ${(await Threads.getInfo(threadID)).threadName || "Unknown"}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬ª„Äéüí¨„Äèùêëùêûùê©ùê•ùê≤ ùê≠ùê¢ùêß ùêßùê°ùêöÃÜÃÅùêß ùêßùêöÃÄùê≤ ùêßùêûÃÇÃÅùêÆ ùê¶ùêÆùê®ÃÇÃÅùêß ùê©ùê°ùêöÃâùêß ùê°ùê®ÃÇÃÄùê¢ ùê≠ùê®ÃõÃÅùê¢ ùêîùê¨ùêûùê´`;
            let sendMsg = text;
            if (event.attachments && event.attachments.length > 0)
                sendMsg = await getAtm(event.attachments, text);
            api.sendMessage(sendMsg, handleReply.threadID, (err, info) => {
                atmDir.forEach(each => fs.existsSync(each) && fs.unlinkSync(each));
                atmDir = [];
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    type: "reply",
                    messageID: info.messageID,
                    messID: messageID,
                    threadID
                });
            });
            break;
        }
        case "reply": {
            let text = `==== [ ùë∑ùíâùíÇÃâùíè ùíâùíêÃÇÃÄùíä ùíïùíñÃõÃÄ ùë®ùë´ùë¥ùë∞ùëµ ] ====\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äé‚è±„Äèùêìùê¢ùê¶ùêû: ${gio}\n„Äéüìù„Äèùêçùê®Ã£ÃÇùê¢ ùêùùêÆùêßùê†: ${body}\n„Äéüì©„Äèùêèùê°ùêöÃâùêß ùê°ùê®ÃÇÃÄùê¢ ùê≠ùêÆÃõÃÄ ùêÄùêùùê¶ùê¢ùêß: ${name}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬ª ¬ª ùêëùêûùê©ùê•ùê≤ ùê≠ùê¢ùêß ùêßùê°ùêöÃÜÃÅùêß ùêßùêöÃÄùê≤ ùêßùêûÃÇÃÅùêÆ ùê¶ùêÆùê®ÃÇÃÅùêß ùê©ùê°ùêöÃâùêß ùê°ùê®ÃÇÃÄùê¢ ùêØùêûÃÇÃÄ ùêÄùêùùê¶ùê¢ùêß üí¨`;
            let sendMsg = text;
            if (event.attachments && event.attachments.length > 0)
                sendMsg = await getAtm(event.attachments, text);
            api.sendMessage(sendMsg, handleReply.threadID, (err, info) => {
                atmDir.forEach(each => fs.existsSync(each) && fs.unlinkSync(each));
                atmDir = [];
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    type: "sendnoti",
                    messageID: info.messageID,
                    threadID
                });
            }, handleReply.messID);
            break;
        }
    }
};

module.exports.run = async function ({ api, event, args, Users }) {
    const moment = require("moment-timezone");
    const gio = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY - HH:mm:ss");
    const { threadID, messageID, senderID, messageReply } = event;

    if (!args[0] && !(event.type == "message_reply" && messageReply && messageReply.attachments && messageReply.attachments.length)) {
        return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung ho·∫∑c reply 1 media ƒë·ªÉ g·ª≠i th√¥ng b√°o!", threadID);
    }

    let allThread = global.data.allThreadID || [];
    let can = 0, canNot = 0;

    let text = `¬ª ùóßùóõùó¢ÃÇùó°ùóö ùóïùóîÃÅùó¢ ùóîùóóùó†ùóúùó° ¬´\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äé‚è∞„Äèùóßùó∂ùó∫ùó≤: ${gio}\n„Äéüìù„Äèùó°ùóºÃ£ÃÇùó∂ ùó±ùòÇùóªùó¥: ${args.join(" ")}\n„Äéüë§„ÄèùóßùòÇÃõÃÄ ùóîùóóùó†ùóúùó°: ${await Users.getNameUser(senderID)} \n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äéüí¨„Äèùó•ùó≤ùóΩùóπùòÜ ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùóªùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóºÃÇÃÅùóª ( ùóΩùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂ ) ùòÉùó≤ÃÄ ùóîùóóùó†ùóúùó° üíû`;

    let sendMsg = text;
    if (event.type == "message_reply" && messageReply && messageReply.attachments && messageReply.attachments.length > 0) {
        sendMsg = await getAtm(messageReply.attachments, text);
    }

    for (const each of allThread) {
        try {
            await api.sendMessage(sendMsg, each, (err, info) => {
                if (err) canNot++;
                else {
                    can++;
                    atmDir.forEach(each => fs.existsSync(each) && fs.unlinkSync(each));
                    atmDir = [];
                    global.client.handleReply.push({
                        name: module.exports.config.name,
                        type: "sendnoti",
                        messageID: info.messageID,
                        messID: messageID,
                        threadID: each
                    });
                }
            });
        } catch (e) {
            canNot++;
        }
    }
    api.sendMessage(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng t·ªõi ${can} nh√≥m.\n‚ùå Kh√¥ng g·ª≠i ƒë∆∞·ª£c t·ªõi ${canNot} nh√≥m.`, threadID);
};
