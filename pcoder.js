const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");

module.exports.config = {
  name: "tuong",
  version: "3.0.0",
  hasPermssion: 0,
  credits: "Nguy·ªÖn Tr∆∞∆°ng Thi·ªán Ph√°t",
  description: "Tr·ª£ l√Ω AI Gemini si√™u c·∫•p, t√≠ch h·ª£p c·∫£m x√∫c, YouTube, mini-game, h·ªçc t·ª´ h·ªôi tho·∫°i, ph·∫£n h·ªìi ·∫£nh, t·ª± ƒë·ªông training, l∆∞u l·ªãch s·ª≠, profile c√° nh√¢n h√≥a, c·ª±c x·ªãn.",
  commandCategory: "ai",
  usages: [
    "tuong [message]",
    "tuong g·ª≠i nh·∫°c [t√™n b√†i]",
    "tuong g·ª≠i video [t√™n clip]",
    "tuong h·ªçc c√¢u n√†y: [n·ªôi dung]",
    "tuong resetdata",
    "tuong training on/off",
    "tuong c·∫£m x√∫c: [c·∫£m x√∫c]",
    "tuong th·ªëng k√™",
    "tuong ch∆°i [mini-game]",
    "tuong gi√∫p t√¥i v·ªõi...",
    "tuong gi·∫£i th√≠ch code: [ƒëo·∫°n code]",
    "tuong project [ng√¥n ng·ªØ]",
    "tuong mp3 [t√™n b√†i]",
    "tuong video [t·ª´ kh√≥a]",
    "tuong t·ª≠ vi [cung ho√†ng ƒë·∫°o]",
    "tuong g·ª≠i ·∫£nh [t√¢m tr·∫°ng]",
    "tuong profile"
  ],
  cooldowns: 2,
  dependencies: {
    "axios": "",
    "fs-extra": "",
    "@distube/ytdl-core": "",
    "fluent-ffmpeg": "",
    "ffmpeg-static": ""
  }
};

// ==== AUTO INITIALIZE DATA FOLDER & FILES ====
module.exports.onLoad = async () => {
  const dataPath = path.join(__dirname, "../../data");
  const userDataPath = path.join(dataPath, "tuong_users.json");
  const trainingDataPath = path.join(dataPath, "tuong_training.json");
  const tempDir = path.join(__dirname, "temp");

  if (!fs.existsSync(dataPath)) fs.mkdirSync(dataPath, { recursive: true });
  if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });
  if (!fs.existsSync(userDataPath)) fs.writeFileSync(userDataPath, JSON.stringify({}));
  if (!fs.existsSync(trainingDataPath)) fs.writeFileSync(trainingDataPath, JSON.stringify([]));

  global.tuongData = {
    users: JSON.parse(fs.readFileSync(userDataPath)),
    training: JSON.parse(fs.readFileSync(trainingDataPath)),
    trainingSessions: new Map()
  };
  global.ytDownloadRequests = new Map();

  // Auto clean temp files older 1h, every 30min
  setInterval(() => {
    try {
      const files = fs.readdirSync(tempDir);
      const now = Date.now();
      files.forEach(file => {
        const filePath = path.join(tempDir, file);
        const stats = fs.statSync(filePath);
        if (now - stats.mtimeMs > 60 * 60 * 1000) fs.unlinkSync(filePath);
      });
    } catch (error) {}
  }, 30 * 60 * 1000);
};

function randomArr(arr) { return arr[Math.floor(Math.random() * arr.length)]; }

const EMOTICONS = {
  vui: "üòÜ", bu·ªìn: "üò¢", t·ª©c: "üò°", ng√°o: "üòµ", y√™u: "üòç", "b√¨nh th∆∞·ªùng": "üôÇ", "ng·∫°i": "üò≥", "c√† kh·ªãa": "üòè"
};

function getEmo(state) {
  for (const [k, v] of Object.entries(EMOTICONS)) if ((state || "").toLowerCase().includes(k)) return v;
  return "ü§ñ";
}

module.exports.handleEvent = async function({ api, event }) {
  if (event.senderID === api.getCurrentUserID() || (!event.body && !event.attachments)) return;
  const { threadID, messageID, senderID, body = "", type, messageReply, attachments } = event;
  const userDataPath = path.join(__dirname, "../../data/tuong_users.json");
  const trainingDataPath = path.join(__dirname, "../../data/tuong_training.json");
  let userData = global.tuongData.users;

  // === AUTO PROFILE, EMOTION, FRIEND SYSTEM
  if (!userData[threadID]) userData[threadID] = {};
  if (!userData[threadID][senderID]) {
    userData[threadID][senderID] = {
      profile: {
        name: "User",
        pronouns: "b·∫°n",
        personality: "th√¢n thi·ªán vui nh·ªôn",
        emotionalState: "b√¨nh th∆∞·ªùng",
        gender: "unknown",
        points: 0,
        joinTime: Date.now()
      },
      journal: [],
      relationship: "b·∫°n th√¢n",
      conversationStyle: "th√¢n thi·ªán",
      preferredLanguage: "Vietnamese",
      lastInteraction: Date.now()
    };
    try {
      const userInfo = await api.getUserInfo(senderID);
      if (userInfo && userInfo[senderID]) userData[threadID][senderID].profile.name = userInfo[senderID].name || "User";
    } catch {}
    fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
  }

  // ==== EMOTION UPDATE ====
  if (/tuong (update )?c·∫£m x√∫c:/.test(body.toLowerCase())) {
    let emo = body.split(":").slice(1).join(":").trim();
    userData[threadID][senderID].profile.emotionalState = emo;
    fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
    return api.sendMessage(
      `ƒê√£ c·∫≠p nh·∫≠t c·∫£m x√∫c cho b·∫°n: ${emo} ${getEmo(emo)}`, threadID, messageID
    );
  }

  // ==== PROFILE VIEW ====
  if (/tuong profile/.test(body.toLowerCase())) {
    const profile = userData[threadID][senderID].profile;
    let msg = `=== üë§ ùó£ùóøùóºùó≥ùó∂ùóπùó≤ ùóßùòÇÃõùóºÃõÃÄùóªùó¥ ùóîùóú ===\n`;
    msg += `‚Ä¢ T√™n: ${profile.name}\n`;
    msg += `‚Ä¢ ƒêi·ªÉm: ${profile.points}\n`;
    msg += `‚Ä¢ T√≠nh c√°ch: ${profile.personality}\n`;
    msg += `‚Ä¢ C·∫£m x√∫c hi·ªán t·∫°i: ${profile.emotionalState} ${getEmo(profile.emotionalState)}\n`;
    msg += `‚Ä¢ Tham gia t·ª´: ${new Date(profile.joinTime).toLocaleString("vi-VN")}\n`;
    msg += `‚Ä¢ M·ªëi quan h·ªá v·ªõi T∆∞·ªùng: ${userData[threadID][senderID].relationship}\n`;
    msg += `‚Ä¢ S·ªë l·∫ßn t∆∞∆°ng t√°c: ${userData[threadID][senderID].journal.length}\n`;
    return api.sendMessage(msg, threadID, messageID);
  }

  // ==== MINIGAME: ƒëo√°n s·ªë ====
  if (/tuong ch∆°i ƒëo√°n s·ªë/.test(body.toLowerCase())) {
    const answer = Math.floor(Math.random() * 10) + 1;
    userData[threadID][senderID].gameGuess = answer;
    fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
    return api.sendMessage("T∆∞·ªùng ƒë√£ nghƒ© ra 1 s·ªë t·ª´ 1-10, ƒëo√°n th·ª≠ ƒëi (reply s·ªë)! N·∫øu ƒë√∫ng ƒë∆∞·ª£c c·ªông ƒëi·ªÉm.", threadID, messageID);
  }
  if (userData[threadID][senderID].gameGuess && /^\d+$/.test(body.trim()) && Number(body) >= 1 && Number(body) <= 10) {
    const ans = Number(body);
    if (ans === userData[threadID][senderID].gameGuess) {
      userData[threadID][senderID].profile.points += 5;
      delete userData[threadID][senderID].gameGuess;
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage(randomArr([
        "Tr·ªùi ∆°i ƒë√∫ng r·ªìi lu√¥n! +5 ƒëi·ªÉm cho b·∫°n nha üòò",
        "ƒê·ªânh lu√¥n, ƒëo√°n tr√∫ng r·ªìi! T∆∞·ªùng c·ªông ƒëi·ªÉm cho b·∫°n ƒë√≥.",
        "ƒêo√°n hay qu√°, ƒë√∫ng s·ªë! B·∫°n pro th·∫≠t."
      ]), threadID, messageID);
    } else {
      userData[threadID][senderID].profile.points -= 1;
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage("Sai r·ªìi, th·ª≠ l·∫°i ƒëi! (B·ªã tr·ª´ 1 ƒëi·ªÉm üòú)", threadID, messageID);
    }
  }

  // ==== IMAGE REACTION ====
  if (attachments && attachments.length > 0 && attachments.some(att => att.type === "photo" || att.type === "animated_image")) {
    if (userData[threadID] && Math.random() < 0.45) {
      try {
        const geminiAPIKey = process.env.GEMINI_API_KEY || "AIzaSyDW0dxS6-Agy6468HfagcUhUKHjo4OSAl8";
        let userGender = userData[threadID][senderID].profile.gender || (Math.random() > 0.5 ? "female" : "male");
        let userRelationship = userData[threadID][senderID].relationship || "b·∫°n th√¢n";
        let userName = userData[threadID][senderID].profile.name || "User";
        const prompt = `Ph·∫£n h·ªìi h√†i h∆∞·ªõc, th√¢n m·∫≠t khi b·∫°n th√¢n g·ª≠i ·∫£nh cho b·∫°n (vai: ${userGender}, mqh: ${userRelationship}) - t·ªëi ƒëa 20 t·ª´, kh√¥ng d√πng prefix.`;
        const response = await axios.post(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPIKey}`,
          { contents: [{ role: "user", parts: [{ text: prompt }] }], generationConfig: { temperature: 0.93, topP: 0.97, maxOutputTokens: 100 } }
        );
        let reactionMessage = (response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "·∫¢nh g√¨ m√† d·ªÖ th∆∞∆°ng th·∫ø!").trim();
        userData[threadID][senderID].journal.push({ type: "imageReaction", botResponse: reactionMessage, timestamp: Date.now() });
        userData[threadID][senderID].lastInteraction = Date.now();
        fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
        api.sendMessage(reactionMessage, threadID, messageID);
      } catch {}
    }
  }

  // ==== REPLY TO BOT MESSAGE ====
  if (type === "message_reply" && messageReply && messageReply.senderID === api.getCurrentUserID()) {
    try {
      const currentUser = userData[threadID][senderID];
      const userName = currentUser.profile.name;
      const geminiAPIKey = process.env.GEMINI_API_KEY || "AIzaSyDW0dxS6-Agy6468HfagcUhUKHjo4OSAl8";
      const systemPrompt = `B·∫°n l√† T∆∞·ªùng, tr·ª£ l√Ω AI vui t√≠nh tr√™n Messenger. ${userName} v·ª´a reply: "${messageReply.body}". H·ªç n√≥i: "${body}". H√£y ti·∫øp t·ª•c h·ªôi tho·∫°i t·ª± nhi√™n, n·ªëi m·∫°ch c≈©, kh√¥ng prefix, th√¢n thi·ªán v√† sinh ƒë·ªông.`;
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPIKey}`,
        { contents: [{ role: "user", parts: [{ text: systemPrompt }] }], generationConfig: { temperature: 0.76, topP: 0.95, maxOutputTokens: 800 } }
      );
      let aiResponse = (response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "T∆∞·ªùng ch∆∞a hi·ªÉu √Ω b·∫°n. N√≥i l·∫°i nha!").trim();
      currentUser.journal.push({
        type: "reply_conversation",
        botPreviousMessage: messageReply.body,
        userReply: body,
        botResponse: aiResponse,
        timestamp: Date.now()
      });
      currentUser.lastInteraction = Date.now();
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage(aiResponse, threadID, messageID);
    } catch (err) {
      return api.sendMessage("T∆∞·ªùng kh√¥ng hi·ªÉu √Ω b·∫°n l·∫Øm. N√≥i l·∫°i th·ª≠ nha!", threadID, messageID);
    }
  }

  // ==== TRAINING MODE ====
  const { trainingSessions } = global.tuongData;
  if (trainingSessions.has(threadID) && !body.toLowerCase().includes("tuong")) {
    const trainingData = JSON.parse(fs.readFileSync(trainingDataPath));
    trainingData.push({ message: body, senderID, threadID, timestamp: Date.now() });
    fs.writeFileSync(trainingDataPath, JSON.stringify(trainingData, null, 2));
    global.tuongData.training = trainingData;
    return;
  }

  // ==== NATURAL REACTION WHEN TAGGED ====
  const programmingKeywords = [
    "javascript", "python", "java", "c++", "c#", "php", "html", "css", "code", "coding",
    "programming", "developer", "function", "variable", "class", "object", "array", "loop",
    "if else", "api", "database", "sql", "nodejs", "react", "typescript", "framework", "algorithm", "git", "github"
  ];
  const messageContainsTuong = body.toLowerCase().includes("tuong");
  const messageStartsWithTuong = body.toLowerCase().startsWith("tuong");
  const containsProgrammingKeywords = programmingKeywords.some(keyword => body.toLowerCase().includes(keyword));
  if ((!messageStartsWithTuong && messageContainsTuong) || (containsProgrammingKeywords && Math.random() < 0.4)) {
    let responses = [
      "C√≥ ai g·ªçi T∆∞·ªùng kh√¥ng nh·ªâ? üëÄ",
      "·ª¶a c√≥ ai nh·∫Øc t√™n T∆∞·ªùng √†?",
      "∆† T∆∞·ªùng nghe th·∫•y t√™n r·ªìi n√®!",
      "ƒêang b√†n g√¨ v·ªÅ T∆∞·ªùng v·∫≠y?",
      "T∆∞·ªùng nghe th·∫•y t√™n r·ªìi ƒë√≥ nha!",
      "C√≥ ai c·∫ßn T∆∞·ªùng gi√∫p g√¨ kh√¥ng?",
      "·ª¶a ƒëang n√≥i g√¨ v·ªÅ T∆∞·ªùng ƒë√≥?"
    ];
    await api.sendMessage(randomArr(responses), threadID);
    return;
  }

  // ==== HANDLE "TUONG" COMMAND ====
  if (messageContainsTuong) {
    // Video/audio download requests, modular ho√° n·∫øu c·∫ßn
    try {
      const youtubeUtil = require("./youtube-utils");
      const result = await youtubeUtil.processMediaRequest(body, api, threadID, messageID, senderID);
      if (result.handled) return;
    } catch {}
    // Resetdata, training mode, h·ªçc c√¢u
    let currentUser = userData[threadID][senderID];
    let userMessage = body.toLowerCase().replace(/tuong\s*[∆°i]?\s*/i, "").trim() || "ch√†o b·∫°n";
    if (userMessage === "resetdata") {
      userData[threadID][senderID] = {
        profile: {
          name: currentUser.profile.name,
          pronouns: "b·∫°n",
          personality: "th√¢n thi·ªán vui nh·ªôn",
          emotionalState: "b√¨nh th∆∞·ªùng",
          gender: currentUser.profile.gender,
          points: 0,
          joinTime: Date.now()
        },
        journal: [],
        relationship: "b·∫°n th√¢n",
        conversationStyle: "nghi√™m t√∫c",
        preferredLanguage: "Vietnamese",
        lastInteraction: Date.now()
      };
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage("D·ªØ li·ªáu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c reset! T∆∞·ªùng coi nh∆∞ b·∫°n m·ªõi lu√¥n, ch∆°i l·∫°i t·ª´ ƒë·∫ßu nh√©!", threadID, messageID);
    }
    if (userMessage.startsWith("training")) {
      const command = userMessage.split(" ")[1];
      if (command === "on") {
        trainingSessions.set(threadID, true);
        return api.sendMessage("ƒê√£ b·∫≠t ch·∫ø ƒë·ªô training. M·ªçi tin nh·∫Øn ti·∫øp theo s·∫Ω ƒë∆∞·ª£c l∆∞u l√†m d·ªØ li·ªáu training (tr·ª´ khi c√≥ t·ª´ 'tuong').", threadID, messageID);
      } else if (command === "off") {
        trainingSessions.delete(threadID);
        return api.sendMessage("ƒê√£ t·∫Øt ch·∫ø ƒë·ªô training.", threadID, messageID);
      }
    }
    if (userMessage.startsWith("h·ªçc c√¢u n√†y:")) {
      const content = userMessage.substring("h·ªçc c√¢u n√†y:".length).trim();
      const trainingData = JSON.parse(fs.readFileSync(trainingDataPath));
      trainingData.push({ message: content, senderID, threadID, timestamp: Date.now() });
      fs.writeFileSync(trainingDataPath, JSON.stringify(trainingData, null, 2));
      global.tuongData.training = trainingData;
      return api.sendMessage("C·∫£m ∆°n b·∫°n! T∆∞·ªùng ƒë√£ h·ªçc ƒë∆∞·ª£c c√¢u n√†y r·ªìi.", threadID, messageID);
    }
    // T·∫°o prompt h·ªôi tho·∫°i, c√° t√≠nh, x·ªãn
    const recentJournal = currentUser.journal.slice(-5).map(entry => `${entry.userMessage || entry.botPreviousMessage || ""}: ${entry.botResponse || ""}`).join("\n");
    const systemPrompt = `B·∫°n l√† T∆∞·ªùng, tr·ª£ l√Ω AI th√¥ng minh, vui v·∫ª, t·ª± tin. H√£y tr·∫£ l·ªùi ti·∫øng Vi·ªát th√¢n thi·ªán, d√πng ƒë·∫°i t·ª´ th√¢n m·∫≠t ("tao-m√†y" n·∫øu ƒë∆∞·ª£c), n√≥i chuy·ªán v·ªõi ${currentUser.profile.name}, m·ªëi quan h·ªá: ${currentUser.relationship}. C·∫£m x√∫c hi·ªán t·∫°i: ${currentUser.profile.emotionalState}. Tin nh·∫Øn g·∫ßn ƒë√¢y:\n${recentJournal}\nNg∆∞·ªùi d√πng ${currentUser.profile.name} n√≥i: "${userMessage}"\nTr·∫£ l·ªùi kh√¥ng qu√° 3 c√¢u, kh√¥ng prefix, sinh ƒë·ªông, c√≥ c·∫£m x√∫c.`;
    try {
      const geminiAPIKey = process.env.GEMINI_API_KEY || "AIzaSyDW0dxS6-Agy6468HfagcUhUKHjo4OSAl8";
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPIKey}`,
        { contents: [{ role: "user", parts: [{ text: systemPrompt }] }], generationConfig: { temperature: 0.74, topP: 0.97, maxOutputTokens: 1000 } }
      );
      let aiResponse = (response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "T∆∞·ªùng ch∆∞a hi·ªÉu √Ω b·∫°n. N√≥i l·∫°i nha!").trim();
      currentUser.journal.push({ type: "conversation", userMessage, botResponse: aiResponse, timestamp: Date.now() });
      currentUser.lastInteraction = Date.now();
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage(aiResponse, threadID, messageID);
    } catch {
      return api.sendMessage("Xin l·ªói, T∆∞·ªùng ƒëang l·ªói nh·∫π. B·∫°n th·ª≠ l·∫°i sau nha!", threadID, messageID);
    }
  }
};

module.exports.run = async function({ api, event, args }) {
  return this.handleEvent({ api, event, args });
};
