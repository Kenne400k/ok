const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");
const ytdl = require("@distube/ytdl-core");
const ffmpegPath = require("ffmpeg-static");
const ffmpeg = require("fluent-ffmpeg");
ffmpeg.setFfmpegPath(ffmpegPath);

module.exports.config = {
  name: "T∆∞·ªùng",
  version: "7.0.0",
  hasPermssion: 0,
  credits: "Nguy·ªÖn Tr∆∞∆°ng Thi·ªán Ph√°t (T∆∞·ªùng AI GenZ, Gemini-YouTube, Kenne400k t·ªëi ∆∞u)",
  description: "AI Gemini ƒëa t√†i: m·ªü video/mp3 qua Gemini, t·∫£i m·ªçi th·ªÉ lo·∫°i, c·∫£m x√∫c, minigame, h·ªçc, profile, training, ph·∫£n h·ªìi ·∫£nh, meme, quote, th·ªùi ti·∫øt, d·ªãch thu·∫≠t, nh·∫Øc h·∫πn, c·ª±c x·ªãn, si√™u an to√†n.",
  commandCategory: "ai",
  usages: [
    "T∆∞·ªùng ∆°i m·ªü video bu·ªìn c·ªßa anh",
    "T∆∞·ªùng g·ª≠i nh·∫°c [t√™n b√†i]",
    "T∆∞·ªùng g·ª≠i video [t·ª´ kh√≥a]",
    "T∆∞·ªùng mp3 [t√™n b√†i]",
    "T∆∞·ªùng c·∫£m x√∫c: [c·∫£m x√∫c]",
    "T∆∞·ªùng ch∆°i ƒëo√°n s·ªë",
    "T∆∞·ªùng profile",
    "T∆∞·ªùng resetdata",
    "T∆∞·ªùng h·ªçc c√¢u n√†y: [n·ªôi dung]",
    "T∆∞·ªùng training on/off",
    "T∆∞·ªùng quote",
    "T∆∞·ªùng d·ªãch [ng√¥n ng·ªØ]: [n·ªôi dung]",
    "T∆∞·ªùng th·ªùi ti·∫øt [ƒë·ªãa ƒëi·ªÉm]",
    "T∆∞·ªùng nh·∫Øc [n·ªôi dung] l√∫c [gi·ªù]"
  ],
  cooldowns: 2,
  dependencies: {
    "axios": "",
    "fs-extra": "",
    "@distube/ytdl-core": "",
    "fluent-ffmpeg": "",
    "ffmpeg-static": ""
  }
};

const tempDir = path.join(__dirname, "temp");
const dataPath = path.join(__dirname, "../../data");
const userDataPath = path.join(dataPath, "tuong_users.json");
const trainingDataPath = path.join(dataPath, "tuong_training.json");
const reminderPath = path.join(dataPath, "tuong_reminders.json");

module.exports.onLoad = async () => {
  if (!fs.existsSync(dataPath)) fs.mkdirSync(dataPath, { recursive: true });
  if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });
  if (!fs.existsSync(userDataPath)) fs.writeFileSync(userDataPath, JSON.stringify({}));
  if (!fs.existsSync(trainingDataPath)) fs.writeFileSync(trainingDataPath, JSON.stringify([]));
  if (!fs.existsSync(reminderPath)) fs.writeFileSync(reminderPath, JSON.stringify([]));
  global.tuongData = {
    users: JSON.parse(fs.readFileSync(userDataPath)),
    training: JSON.parse(fs.readFileSync(trainingDataPath)),
    trainingSessions: new Map(),
    reminders: JSON.parse(fs.readFileSync(reminderPath))
  };
  global.ytDownloadRequests = new Map();
  setInterval(() => {
    try {
      const files = fs.readdirSync(tempDir);
      const now = Date.now();
      files.forEach(file => {
        const filePath = path.join(tempDir, file);
        const stats = fs.statSync(filePath);
        if (now - stats.mtimeMs > 60 * 60 * 1000) fs.unlinkSync(filePath);
      });
    } catch {}
  }, 30 * 60 * 1000);

  setInterval(() => handleReminders(), 30 * 1000);
};

function randomArr(arr) { return arr[Math.floor(Math.random() * arr.length)]; }
const EMOTICONS = {
  vui: "üòÜ", bu·ªìn: "üò¢", t·ª©c: "üò°", ng√°o: "üòµ", y√™u: "üòç", "b√¨nh th∆∞·ªùng": "üôÇ", "ng·∫°i": "üò≥", "c√† kh·ªãa": "üòè", "t·ª± tin": "üòé", "ƒëang y√™u": "üíò", "h√†o h·ª©ng": "ü§©", "meme": "üòÇ"
};
function getEmo(state) {
  for (const [k, v] of Object.entries(EMOTICONS)) if ((state || "").toLowerCase().includes(k)) return v;
  return "ü§ñ";
}

async function downloadYouTube(videoUrl, type, outPath) {
  return new Promise((resolve, reject) => {
    try {
      if (type === "mp3") {
        const stream = ytdl(videoUrl, { filter: "audioonly" });
        ffmpeg(stream)
          .audioBitrate(128)
          .format("mp3")
          .save(outPath)
          .on("end", () => resolve(outPath))
          .on("error", reject);
      } else {
        const stream = ytdl(videoUrl, { quality: "highestvideo" });
        ffmpeg(stream)
          .videoCodec('libx264')
          .audioCodec('aac')
          .format('mp4')
          .save(outPath)
          .on("end", () => resolve(outPath))
          .on("error", reject);
      }
    } catch (err) { reject(err); }
  });
}

// Weather API (Open-Meteo, free, kh√¥ng c·∫ßn key)
async function getWeather(location) {
  try {
    const geo = await axios.get(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location)}&format=json&limit=1`);
    if (!geo.data[0]) return null;
    const { lat, lon, display_name } = geo.data[0];
    const res = await axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
    if (!res.data.current_weather) return null;
    const w = res.data.current_weather;
    return {
      location: display_name,
      temp: w.temperature,
      wind: w.windspeed,
      code: w.weathercode,
      desc: weatherVN(w.weathercode)
    };
  } catch { return null; }
}
function weatherVN(code) {
  const map = {
    0: "Tr·ªùi quang ƒë√£ng",
    1: "Tr·ªùi √≠t m√¢y",
    2: "Tr·ªùi c√≥ m√¢y",
    3: "Tr·ªùi √¢m u",
    45: "S∆∞∆°ng m√π",
    48: "S∆∞∆°ng m√π ƒë√¥ng",
    51: "M∆∞a ph√πn nh·∫π",
    53: "M∆∞a ph√πn",
    55: "M∆∞a ph√πn d√†y",
    56: "M∆∞a ph√πn ƒë√≥ng bƒÉng nh·∫π",
    57: "M∆∞a ph√πn ƒë√≥ng bƒÉng",
    61: "M∆∞a nh·∫π",
    63: "M∆∞a v·ª´a",
    65: "M∆∞a l·ªõn",
    66: "M∆∞a ƒë√≥ng bƒÉng nh·∫π",
    67: "M∆∞a ƒë√≥ng bƒÉng m·∫°nh",
    71: "Tuy·∫øt nh·∫π",
    73: "Tuy·∫øt v·ª´a",
    75: "Tuy·∫øt d√†y",
    77: "Tuy·∫øt ƒë√°",
    80: "M∆∞a r√†o nh·∫π",
    81: "M∆∞a r√†o v·ª´a",
    82: "M∆∞a r√†o m·∫°nh",
    85: "M∆∞a tuy·∫øt nh·∫π",
    86: "M∆∞a tuy·∫øt m·∫°nh",
    95: "D√¥ng",
    96: "D√¥ng, m∆∞a ƒë√° nh·∫π",
    99: "D√¥ng, m∆∞a ƒë√° m·∫°nh"
  };
  return map[code] || "Kh√¥ng r√µ";
}

// Quote API
async function getQuote() {
  try {
    const res = await axios.get("https://api.quotable.io/random?maxLength=80");
    return `"${res.data.content}"\n‚Äî ${res.data.author}`;
  } catch {
    return randomArr([
      "ƒê·ªùi l√† b·ªÉ kh·ªï, qua ƒë∆∞·ª£c b·ªÉ kh·ªï l√† qua ƒë·ªùi.",
      "H·ªçc kh√¥ng ch∆°i ƒë√°nh r∆°i tu·ªïi tr·∫ª, ch∆°i kh√¥ng h·ªçc... ch∆°i ti·∫øp.",
      "C·ªë g·∫Øng l√™n, ƒë·ªùi c√≤n d√†i, drama c√≤n nhi·ªÅu!"
    ]);
  }
}

// D·ªãch thu·∫≠t (Google Translate API free unofficial)
async function translateText(text, lang) {
  try {
    const res = await axios.get(
      `https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${lang}&dt=t&q=${encodeURIComponent(text)}`
    );
    return res.data[0].map(i => i[0]).join("");
  } catch {
    return "Kh√¥ng d·ªãch ƒë∆∞·ª£c n·ªôi dung!";
  }
}

// Nh·∫Øc h·∫πn th√¥ng minh
async function handleReminders(api = null) {
  let reminders = [];
  try { reminders = JSON.parse(fs.readFileSync(reminderPath)); } catch {}
  const now = Date.now();
  for (let i = reminders.length - 1; i >= 0; i--) {
    const rem = reminders[i];
    if (rem.time <= now) {
      if (api)
        api.sendMessage(`‚è∞ Nh·∫Øc b·∫°n: ${rem.content}`, rem.threadID, rem.messageID || null);
      reminders.splice(i, 1);
    }
  }
  fs.writeFileSync(reminderPath, JSON.stringify(reminders, null, 2));
  global.tuongData.reminders = reminders;
}

// ==== VIDEO/MP3 YOUTUBE T·ª™ GEMINI ====
async function handleGeminiMedia(api, threadID, messageID, senderID, geminiPrompt) {
  const geminiAPIKey = process.env.GEMINI_API_KEY || "AIzaSyDW0dxS6-Agy6468HfagcUhUKHjo4OSAl8";
  const geminiSysPrompt = `
${geminiPrompt}
N·∫øu c√≥ th·ªÉ, ch·ªâ tr·∫£ l·ªùi b·∫±ng 1 ho·∫∑c nhi·ªÅu link video YouTube ho·∫∑c mp3, m·ªói link tr√™n m·ªôt d√≤ng ri√™ng. N·∫øu c√≥ mp3 ho·∫∑c link nh·∫°c h√£y ∆∞u ti√™n g·ª≠i.
N·∫øu kh√¥ng c√≥ link h√£y tr·∫£ l·ªùi "Kh√¥ng t√¨m th·∫•y video n√†o ph√π h·ª£p."
  `.trim();
  let geminiResp;
  try {
    const res = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPIKey}`,
      {
        contents: [{ role: "user", parts: [{ text: geminiSysPrompt }] }],
        generationConfig: { temperature: 0.72, topP: 0.98, maxOutputTokens: 500 }
      }
    );
    geminiResp = (res.data?.candidates?.[0]?.content?.parts?.[0]?.text || "").trim();
  } catch {
    return api.sendMessage("T∆∞·ªùng ƒëang lag, th·ª≠ l·∫°i sau nh√©!", threadID, messageID);
  }
  if (!geminiResp || /kh√¥ng t√¨m th·∫•y video/i.test(geminiResp)) {
    return api.sendMessage("Kh√¥ng t√¨m ƒë∆∞·ª£c video n√†o h·ª£p l√Ω.", threadID, messageID);
  }
  const ytLinks = [];
  const mp3Links = [];
  const ytRegex = /(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/[^\s]+/gi;
  const mp3Regex = /(https?:\/\/[^\s]+\.mp3)/gi;
  let match;
  while ((match = ytRegex.exec(geminiResp)) !== null) ytLinks.push(match[0]);
  while ((match = mp3Regex.exec(geminiResp)) !== null) mp3Links.push(match[0]);
  let links = mp3Links.concat(ytLinks);
  if (links.length === 0) return api.sendMessage("Kh√¥ng t√¨m ƒë∆∞·ª£c link n√†o t·ª´ Gemini!", threadID, messageID);
  let msg = "üîó T∆∞·ªùng t√¨m ƒë∆∞·ª£c nh·ªØng link n√†y:\n";
  links.forEach((link, i) => { msg += `${i+1}. ${link}\n`; });
  msg += "\n- Reply s·ªë th·ª© t·ª± ƒë·ªÉ t·∫£i v·ªÅ (mp3/video n·∫øu l√† Youtube).\n- Ho·∫∑c reply 'm·ªü' + s·ªë ƒë·ªÉ nh·∫≠n link d·∫°ng web m·ªü nhanh.";
  api.sendMessage(msg, threadID, (err, replyMsg) => {
    if (!replyMsg) return;
    global.ytDownloadRequests.set(replyMsg.messageID, {
      links, senderID, timestamp: Date.now()
    });
  }, messageID);
}

// ==== MAIN HANDLE EVENT ====
module.exports.handleEvent = async function({ api, event }) {
  if (event.senderID === api.getCurrentUserID() || (!event.body && !event.attachments)) return;
  const { threadID, messageID, senderID, body = "", type, messageReply, attachments } = event;
  let userData = global.tuongData.users;
  // ==== PROFILE, STREAK, AUTO CREATE ====
  if (!userData[threadID]) userData[threadID] = {};
  if (!userData[threadID][senderID]) {
    userData[threadID][senderID] = {
      profile: {
        name: "B·∫°n",
        pronouns: "b·∫°n",
        personality: "h√†i h∆∞·ªõc, ng√°o, th√¢n thi·ªán",
        emotionalState: "b√¨nh th∆∞·ªùng",
        gender: "unknown",
        points: 0,
        joinTime: Date.now(),
        streak: 0
      },
      journal: [],
      relationship: "b·∫°n th√¢n",
      conversationStyle: "genz",
      preferredLanguage: "Vietnamese",
      lastInteraction: Date.now(),
      lastMessageDay: (new Date()).toLocaleDateString("vi-VN")
    };
    try {
      const userInfo = await api.getUserInfo(senderID);
      if (userInfo && userInfo[senderID]) userData[threadID][senderID].profile.name = userInfo[senderID].name || "B·∫°n";
    } catch {}
    fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
  }
  let today = (new Date()).toLocaleDateString("vi-VN");
  let user = userData[threadID][senderID];
  if (user.lastMessageDay !== today) {
    user.profile.streak = (user.profile.streak || 0) + 1;
    user.lastMessageDay = today;
    user.profile.points += 2;
    fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
    api.sendMessage(`üî• ƒêi·ªÉm danh th√†nh c√¥ng! Chu·ªói ng√†y ho·∫°t ƒë·ªông li√™n t·ª•c: ${user.profile.streak} ng√†y (+2 ƒëi·ªÉm)`, threadID, messageID);
    return;
  }

  // ==== REMINDER ====
  if (/t∆∞·ªùng nh·∫Øc (.+) l√∫c (\d{1,2}:\d{2})/i.test(body.toLowerCase())) {
    const match = body.match(/t∆∞·ªùng nh·∫Øc (.+) l√∫c (\d{1,2}:\d{2})/i);
    if (match) {
      let content = match[1].trim();
      let [h, m] = match[2].split(":").map(Number);
      let now = new Date();
      let remindTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), h, m, 0, 0).getTime();
      if (remindTime < Date.now()) remindTime += 24 * 60 * 60 * 1000;
      let reminders = [];
      try { reminders = JSON.parse(fs.readFileSync(reminderPath)); } catch {}
      reminders.push({ content, time: remindTime, threadID, messageID });
      fs.writeFileSync(reminderPath, JSON.stringify(reminders, null, 2));
      global.tuongData.reminders = reminders;
      return api.sendMessage(`Nh·∫Øc "${content}" v√†o l√∫c ${match[2]} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t!`, threadID, messageID);
    }
  }

  // ==== D·ªäCH THU·∫¨T ====
  if (/t∆∞·ªùng d·ªãch ([a-z\-]+):/i.test(body.toLowerCase())) {
    const match = body.match(/t∆∞·ªùng d·ªãch ([a-z\-]+):(.+)/i);
    if (match) {
      let lang = match[1].toLowerCase();
      let text = match[2].trim();
      let result = await translateText(text, lang);
      return api.sendMessage(`B·∫£n d·ªãch sang [${lang}]:\n${result}`, threadID, messageID);
    }
  }

  // ==== QUOTE ====
  if (/t∆∞·ªùng quote/i.test(body.toLowerCase())) {
    let quote = await getQuote();
    return api.sendMessage(`üå∏ Quote cho b·∫°n:\n${quote}`, threadID, messageID);
  }

  // ==== WEATHER ====
  if (/t∆∞·ªùng th·ªùi ti·∫øt/i.test(body.toLowerCase())) {
    let match = body.match(/t∆∞·ªùng th·ªùi ti·∫øt (.+)/i);
    let location = match ? match[1].trim() : "H√† N·ªôi";
    let w = await getWeather(location);
    if (!w) return api.sendMessage("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin th·ªùi ti·∫øt!", threadID, messageID);
    return api.sendMessage(`üå§ Th·ªùi ti·∫øt t·∫°i ${w.location}:\n‚Ä¢ ${w.desc}\n‚Ä¢ Nhi·ªát ƒë·ªô: ${w.temp}¬∞C\n‚Ä¢ Gi√≥: ${w.wind} km/h`, threadID, messageID);
  }

  // ==== EMOTION UPDATE ====
  if (/t∆∞·ªùng (update )?c·∫£m x√∫c:/.test(body.toLowerCase())) {
    let emo = body.split(":").slice(1).join(":").trim();
    user.profile.emotionalState = emo;
    fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
    return api.sendMessage(`ƒê√£ c·∫≠p nh·∫≠t c·∫£m x√∫c cho b·∫°n: ${emo} ${getEmo(emo)}`, threadID, messageID);
  }
  // ==== PROFILE ====
  if (/t∆∞·ªùng profile/.test(body.toLowerCase())) {
    let msg = `=== üßë‚Äçüíª ùó£ùóøùóºùó≥ùó∂ùóπùó≤ ùóßùòÇÃõùóºÃõÃÄùóªùó¥ ùóîùóú ===\n`;
    msg += `‚Ä¢ T√™n: ${user.profile.name}\n‚Ä¢ ƒêi·ªÉm: ${user.profile.points}\n‚Ä¢ Chu·ªói ng√†y: ${user.profile.streak} üî•\n‚Ä¢ T√≠nh c√°ch: ${user.profile.personality}\n‚Ä¢ C·∫£m x√∫c hi·ªán t·∫°i: ${user.profile.emotionalState} ${getEmo(user.profile.emotionalState)}\n‚Ä¢ Tham gia t·ª´: ${new Date(user.profile.joinTime).toLocaleString("vi-VN")}\n‚Ä¢ M·ªëi quan h·ªá: ${user.relationship}\n‚Ä¢ S·ªë l·∫ßn t∆∞∆°ng t√°c: ${user.journal.length}`;
    return api.sendMessage(msg, threadID, messageID);
  }

  // ==== MINIGAME: ƒëo√°n s·ªë ====
  if (/t∆∞·ªùng ch∆°i ƒëo√°n s·ªë/.test(body.toLowerCase())) {
    const answer = Math.floor(Math.random() * 10) + 1;
    user.gameGuess = answer;
    fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
    return api.sendMessage("T∆∞·ªùng ƒë√£ nghƒ© ra 1 s·ªë t·ª´ 1-10, ƒëo√°n th·ª≠ ƒëi (reply s·ªë)! N·∫øu ƒë√∫ng ƒë∆∞·ª£c c·ªông ƒëi·ªÉm.", threadID, messageID);
  }
  if (user.gameGuess && /^\d+$/.test(body.trim()) && Number(body) >= 1 && Number(body) <= 10) {
    const ans = Number(body);
    if (ans === user.gameGuess) {
      user.profile.points += 7;
      delete user.gameGuess;
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage(randomArr([
        "Tr·ªùi ∆°i ƒë√∫ng r·ªìi lu√¥n! +7 ƒëi·ªÉm cho b·∫°n nha üòò",
        "ƒê·ªânh lu√¥n, ƒëo√°n tr√∫ng r·ªìi! T∆∞·ªùng c·ªông ƒëi·ªÉm cho b·∫°n ƒë√≥.",
        "ƒêo√°n hay qu√°, ƒë√∫ng s·ªë! B·∫°n pro th·∫≠t."
      ]), threadID, messageID);
    } else {
      user.profile.points -= 2;
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage("Sai r·ªìi, th·ª≠ l·∫°i ƒëi! (B·ªã tr·ª´ 2 ƒëi·ªÉm üòú)", threadID, messageID);
    }
  }

  // ==== IMAGE REACTION ====
  if (attachments && attachments.length > 0 && attachments.some(att => att.type === "photo" || att.type === "animated_image")) {
    if (userData[threadID] && Math.random() < 0.49) {
      try {
        const geminiAPIKey = process.env.GEMINI_API_KEY || "AIzaSyDW0dxS6-Agy6468HfagcUhUKHjo4OSAl8";
        let userGender = user.profile.gender || (Math.random() > 0.5 ? "female" : "male");
        let userRelationship = user.relationship || "b·∫°n th√¢n";
        let userName = user.profile.name || "B·∫°n";
        const prompt = `B·∫°n l√† T∆∞·ªùng (AI GenZ). Ph·∫£n h·ªìi c·ª±c h√†i, c·ª±c ng·∫ßu, khi b·∫°n th√¢n (${userGender}) g·ª≠i ·∫£nh cho b·∫°n (${userRelationship}). Ph·∫£n h·ªìi d∆∞·ªõi 18 t·ª´, kh√¥ng prefix, GenZ vibe.`;
        const response = await axios.post(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPIKey}`,
          { contents: [{ role: "user", parts: [{ text: prompt }] }], generationConfig: { temperature: 0.98, topP: 0.99, maxOutputTokens: 60 } }
        );
        let reactionMessage = (response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "·∫¢nh g√¨ m√† d·ªÖ th∆∞∆°ng th·∫ø!").trim();
        user.journal.push({ type: "imageReaction", botResponse: reactionMessage, timestamp: Date.now() });
        user.lastInteraction = Date.now();
        fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
        api.sendMessage(reactionMessage, threadID, messageID);
      } catch {}
    }
  }

  // ==== VIDEO/MP3 YOUTUBE T·ª™ GEMINI ====
  if (/t∆∞·ªùng.*(m·ªü|ph√°t|play|cho|g·ª≠i|share|b·∫≠t|chuy·ªÉn|l·∫•y|t·∫£i).*?(video|clip|mp3|audio|nh·∫°c|b√†i|b·∫£n|track)/i.test(body.toLowerCase())) {
    let cleaned = body.replace(/t∆∞·ªùng\s*∆°i/gi, "").replace(/t∆∞·ªùng/gi, "").trim();
    let prompt = cleaned;
    if (!prompt || prompt.length < 6) prompt = "G·ª£i √Ω cho m√¨nh m·ªôt video ho·∫∑c mp3 trending, ho·∫∑c ch·ªß ƒë·ªÅ hot tr√™n YouTube.";
    return handleGeminiMedia(api, threadID, messageID, senderID, prompt);
  }

  // ==== X·ª¨ L√ù REPLY ƒê·ªÇ T·∫¢I VIDEO/MP3 T·ª™ GEMINI LINK ====
  if (type === "message_reply" && global.ytDownloadRequests && global.ytDownloadRequests.has(messageReply?.messageID)) {
    const req = global.ytDownloadRequests.get(messageReply.messageID);
    if (!req || (Date.now() - req.timestamp > 15 * 60 * 1000)) {
      global.ytDownloadRequests.delete(messageReply.messageID);
      return api.sendMessage("Y√™u c·∫ßu t·∫£i/m·ªü ƒë√£ h·∫øt h·∫°n. G√µ l·∫°i y√™u c·∫ßu nh√©!", threadID, messageID);
    }
    if (senderID !== req.senderID) return;
    const numMatch = body.trim().match(/^m·ªü\s*(\d+)/i) || body.trim().match(/^(\d+)$/);
    if (!numMatch) return api.sendMessage("Reply s·ªë th·ª© t·ª± ho·∫∑c 'm·ªü' + s·ªë t∆∞∆°ng ·ª©ng!", threadID, messageID);
    const idx = parseInt(numMatch[1] || numMatch[0]);
    if (isNaN(idx) || idx < 1 || idx > req.links.length) return api.sendMessage("S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!", threadID, messageID);
    const link = req.links[idx-1];
    if (/m·ªü/i.test(body)) {
      return api.sendMessage(`ƒê√¢y l√† link b·∫°n y√™u c·∫ßu: ${link}`, threadID, messageID);
    }
    if (/\.mp3(\?|$)/i.test(link)) {
      const outPath = path.join(__dirname, "temp", `gemini_${Date.now()}.mp3`);
      try {
        const res = await axios.get(link, { responseType: "arraybuffer" });
        fs.writeFileSync(outPath, Buffer.from(res.data, "binary"));
        await api.sendMessage({body: "G·ª≠i b·∫°n mp3 n√®!", attachment: fs.createReadStream(outPath)}, threadID, () => {
          try { fs.unlinkSync(outPath); } catch {}
        }, messageID);
      } catch {
        return api.sendMessage("Kh√¥ng t·∫£i ƒë∆∞·ª£c file mp3 t·ª´ link ngo√†i!", threadID, messageID);
      }
      global.ytDownloadRequests.delete(messageReply.messageID);
      return;
    }
    if (/(youtube\.com|youtu\.be)/i.test(link)) {
      api.sendMessage("B·∫°n mu·ªën nh·∫≠n video hay mp3? (reply: mp3/video)", threadID, (err, subMsg) => {
        if (!subMsg) return;
        global.ytDownloadRequests.set(subMsg.messageID, {
          ytlink: link, senderID, timestamp: Date.now()
        });
      }, messageID);
    }
    global.ytDownloadRequests.delete(messageReply.messageID);
    return;
  }
  // REPLY ti·∫øp theo: nh·∫≠n x√°c nh·∫≠n mp3/video t·ª´ link youtube
  if (type === "message_reply" && global.ytDownloadRequests && global.ytDownloadRequests.has(messageReply?.messageID)) {
    const req = global.ytDownloadRequests.get(messageReply.messageID);
    if (!req || !req.ytlink || (Date.now() - req.timestamp > 15 * 60 * 1000)) {
      global.ytDownloadRequests.delete(messageReply.messageID);
      return;
    }
    if (senderID !== req.senderID) return;
    let replyType = /mp3|audio|nh·∫°c/.test(body.toLowerCase()) ? "mp3" : "mp4";
    const outName = `geminilink_${Date.now()}.${replyType}`;
    const outPath = path.join(__dirname, "temp", outName);
    api.sendMessage("ƒêang t·∫£i & x·ª≠ l√Ω file, ƒë·ª£i x√≠u nha ...", threadID, async () => {
      try {
        await downloadYouTube(req.ytlink, replyType, outPath);
        const stats = fs.statSync(outPath);
        if (stats.size > 90 * 1024 * 1024) {
          fs.unlinkSync(outPath);
          return api.sendMessage("File qu√° l·ªõn kh√¥ng th·ªÉ g·ª≠i qua Messenger. Vui l√≤ng ch·ªçn video kh√°c/ng·∫Øn h∆°n!", threadID, messageID);
        }
        api.sendMessage({ body: `G·ª≠i b·∫°n file ${replyType === "mp3" ? "mp3" : "video"} n√®!`, attachment: fs.createReadStream(outPath) }, threadID, () => {
          try { fs.unlinkSync(outPath); } catch {}
        }, messageID);
      } catch (err) {
        api.sendMessage("L·ªói t·∫£i/g·ª≠i file. C√≥ th·ªÉ video ƒë√£ ch·∫∑n t·∫£i ho·∫∑c l·ªói h·ªá th·ªëng!", threadID, messageID);
        try { fs.unlinkSync(outPath); } catch {}
      }
    });
    global.ytDownloadRequests.delete(messageReply.messageID);
    return;
  }

  // ==== REPLY TO BOT MESSAGE, DUY TR√å M·∫†CH H·ªòI THO·∫†I ====
  if (type === "message_reply" && messageReply && messageReply.senderID === api.getCurrentUserID()) {
    try {
      const geminiAPIKey = process.env.GEMINI_API_KEY || "AIzaSyDW0dxS6-Agy6468HfagcUhUKHjo4OSAl8";
      const systemPrompt = `B·∫°n l√† T∆∞·ªùng, AI c·ª±c th√¢n thi·ªán, si√™u GenZ, vui t√≠nh, c·ª±c ng·∫ßu. ${user.profile.name} v·ª´a reply: "${messageReply.body}". H·ªç n√≥i: "${body}". H√£y ti·∫øp t·ª•c h·ªôi tho·∫°i t·ª± nhi√™n, n·ªëi m·∫°ch c≈©, kh√¥ng prefix, th√™m ch√∫t meme/emoji n·∫øu h·ª£p.`;
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPIKey}`,
        { contents: [{ role: "user", parts: [{ text: systemPrompt }] }], generationConfig: { temperature: 0.85, topP: 0.98, maxOutputTokens: 800 } }
      );
      let aiResponse = (response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "T∆∞·ªùng ch∆∞a hi·ªÉu √Ω b·∫°n. N√≥i l·∫°i nha!").trim();
      user.journal.push({
        type: "reply_conversation",
        botPreviousMessage: messageReply.body,
        userReply: body,
        botResponse: aiResponse,
        timestamp: Date.now()
      });
      user.lastInteraction = Date.now();
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage(aiResponse, threadID, messageID);
    } catch (err) {
      return api.sendMessage("T∆∞·ªùng kh√¥ng hi·ªÉu √Ω b·∫°n l·∫Øm. N√≥i l·∫°i th·ª≠ nha!", threadID, messageID);
    }
  }

  // ==== TRAINING MODE ====
  const { trainingSessions } = global.tuongData;
  if (trainingSessions.has(threadID) && !body.toLowerCase().includes("t∆∞·ªùng")) {
    const trainingData = JSON.parse(fs.readFileSync(trainingDataPath));
    trainingData.push({ message: body, senderID, threadID, timestamp: Date.now() });
    fs.writeFileSync(trainingDataPath, JSON.stringify(trainingData, null, 2));
    global.tuongData.training = trainingData;
    return;
  }

  // ==== PH·∫¢N ·ª®NG KHI B·ªä TAG/LI√äN QUAN CODE ====
  const programmingKeywords = [
    "javascript", "python", "java", "c++", "c#", "php", "html", "css", "code", "coding",
    "programming", "developer", "function", "variable", "class", "object", "array", "loop",
    "if else", "api", "database", "sql", "nodejs", "react", "typescript", "framework", "algorithm", "git", "github"
  ];
  const messageContainsTuong = body.toLowerCase().includes("t∆∞·ªùng");
  const messageStartsWithTuong = body.toLowerCase().startsWith("t∆∞·ªùng");
  const containsProgrammingKeywords = programmingKeywords.some(keyword => body.toLowerCase().includes(keyword));
  if ((!messageStartsWithTuong && messageContainsTuong) || (containsProgrammingKeywords && Math.random() < 0.55)) {
    let responses = [
      "Ai g·ªçi T∆∞·ªùng ƒë·∫•y nh·ªâ? üëÄ",
      "∆† t nghe th·∫•y t√™n T∆∞·ªùng lu√¥n n√®!",
      "B√†n g√¨ v·ªÅ T∆∞·ªùng th·∫ø?",
      "T∆∞·ªùng nghe th·∫•y t√™n r·ªìi ƒë√≥ nha!",
      "C√≥ ai c·∫ßn T∆∞·ªùng gi√∫p g√¨ kh√¥ng?",
      "·ª¶a ƒëang n√≥i g√¨ v·ªÅ T∆∞·ªùng ƒë√≥?",
      "T∆∞·ªùng ·ªü ƒë√¢y, c√≥ g√¨ hot?"
    ];
    await api.sendMessage(randomArr(responses), threadID);
    return;
  }

  // ==== HANDLE "T∆Ø·ªúNG" COMMAND ====
  if (messageContainsTuong) {
    let userMessage = body.toLowerCase().replace(/t∆∞·ªùng\s*[∆°i]?\s*/i, "").trim() || "ch√†o b·∫°n";
    if (userMessage === "resetdata") {
      userData[threadID][senderID] = {
        profile: {
          name: user.profile.name,
          pronouns: "b·∫°n",
          personality: "h√†i h∆∞·ªõc, ng√°o, th√¢n thi·ªán",
          emotionalState: "b√¨nh th∆∞·ªùng",
          gender: user.profile.gender,
          points: 0,
          joinTime: Date.now(),
          streak: 0
        },
        journal: [],
        relationship: "b·∫°n th√¢n",
        conversationStyle: "genz",
        preferredLanguage: "Vietnamese",
        lastInteraction: Date.now(),
        lastMessageDay: today
      };
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage("D·ªØ li·ªáu c·ªßa b·∫°n ƒë√£ reset! T∆∞·ªùng coi nh∆∞ b·∫°n m·ªõi toanh nh√©, l·∫°i l√†m b·∫°n t·ª´ ƒë·∫ßu ü§ù", threadID, messageID);
    }
    if (userMessage.startsWith("training")) {
      const command = userMessage.split(" ")[1];
      if (command === "on") {
        trainingSessions.set(threadID, true);
        return api.sendMessage("B·∫≠t training! M·ªçi tin nh·∫Øn ti·∫øp theo s·∫Ω ƒë∆∞·ª£c l∆∞u l·∫°i (tr·ª´ khi c√≥ t·ª´ 'T∆∞·ªùng').", threadID, messageID);
      } else if (command === "off") {
        trainingSessions.delete(threadID);
        return api.sendMessage("ƒê√£ t·∫Øt ch·∫ø ƒë·ªô training.", threadID, messageID);
      }
    }
    if (userMessage.startsWith("h·ªçc c√¢u n√†y:")) {
      const content = userMessage.substring("h·ªçc c√¢u n√†y:".length).trim();
      const trainingData = JSON.parse(fs.readFileSync(trainingDataPath));
      trainingData.push({ message: content, senderID, threadID, timestamp: Date.now() });
      fs.writeFileSync(trainingDataPath, JSON.stringify(trainingData, null, 2));
      global.tuongData.training = trainingData;
      return api.sendMessage("C·∫£m ∆°n b·∫°n! T∆∞·ªùng ƒë√£ h·ªçc ƒë∆∞·ª£c c√¢u n√†y r·ªìi, l∆∞u v√†o n√£o lu√¥n üòé", threadID, messageID);
    }
    // T·∫°o prompt h·ªôi tho·∫°i c·ª±c GenZ, vui v·∫ª, n·ªëi m·∫°ch, bonus meme
    const recentJournal = user.journal.slice(-6).map(entry => `${entry.userMessage || entry.botPreviousMessage || ""}: ${entry.botResponse || ""}`).join("\n");
    const systemPrompt = `B·∫°n l√† T∆∞·ªùng AI, GenZ, vui nh·ªôn, c·ª±c th√¢n thi·ªán, c·ª±c ng·∫ßu, bi·∫øt meme, emoji, kh√¥ng ng·∫°i c√† kh·ªãa. H√£y n√≥i chuy·ªán v·ªõi ${user.profile.name} (m·ªëi quan h·ªá: ${user.relationship}, c·∫£m x√∫c: ${user.profile.emotionalState}, streak: ${user.profile.streak}). Tin nh·∫Øn g·∫ßn ƒë√¢y:\n${recentJournal}\nNg∆∞·ªùi d√πng n√≥i: "${userMessage}"\nTr·∫£ l·ªùi kh√¥ng qu√° 3 c√¢u, kh√¥ng prefix, ch√®n emoji/meme n·∫øu h·ª£p, vibe GenZ.`;
    try {
      const geminiAPIKey = process.env.GEMINI_API_KEY || "AIzaSyDW0dxS6-Agy6468HfagcUhUKHjo4OSAl8";
      const response = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiAPIKey}`,
        { contents: [{ role: "user", parts: [{ text: systemPrompt }] }], generationConfig: { temperature: 0.89, topP: 0.99, maxOutputTokens: 1000 } }
      );
      let aiResponse = (response.data?.candidates?.[0]?.content?.parts?.[0]?.text || "T∆∞·ªùng ch∆∞a hi·ªÉu √Ω b·∫°n. N√≥i l·∫°i nha!").trim();
      user.journal.push({ type: "conversation", userMessage, botResponse: aiResponse, timestamp: Date.now() });
      user.lastInteraction = Date.now();
      fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
      return api.sendMessage(aiResponse, threadID, messageID);
    } catch {
      return api.sendMessage("Sorry, T∆∞·ªùng ƒëang lag nh·∫π. Th·ª≠ l·∫°i sau nha!", threadID, messageID);
    }
  }
};

module.exports.run = async function({ api, event, args }) {
  return this.handleEvent({ api, event, args });
};
