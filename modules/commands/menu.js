module.exports.config = {
    name: "menu101",
    version: "3.0.0",
    hasPermssion: 0,
    credits: "hphong",
    description: "H∆∞·ªõng d·∫´n cho ng∆∞·ªùi m·ªõi",
    usages: "[all/-a] [s·ªë trang]",
    commandCategory: "D√†nh cho ng∆∞·ªùi d√πng",
    usePrefix: false,
    cooldowns: 5
};

module.exports.handleReply = async function ({ api, event, handleReply }) {
    const { commands } = global.client;
    const num = parseInt(event.body.trim());
    const prefix = global.config.PREFIX;

    // Ki·ªÉm tra v√† x·ª≠ l√Ω khi reply l·ªánh trong nh√≥m ch·ªß ƒë·ªÅ
    if (handleReply.type === "cmd_group") {
        if (isNaN(num) || num <= 0 || num > handleReply.content.length) {
            return api.sendMessage({
                body: "ùó¶ùóºÃÇÃÅ ùóØùóÆÃ£ùóª ùó∞ùóµùóºÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóªùóÆÃÜÃÄùó∫ ùòÅùóøùóºùóªùó¥ ùó±ùóÆùóªùóµ ùòÄùóÆÃÅùó∞ùóµ, ùòÉùòÇùó∂ ùóπùóºÃÄùóªùó¥ ùòÅùóµùòÇÃõÃâ ùóπùóÆÃ£ùó∂!!",
                attachment: global.khanhdayr.splice(0, 1)
            }, event.threadID);
        }

        let selectedGroup = handleReply.content[num - 1]; // L·∫•y nh√≥m ch·ªß ƒë·ªÅ ƒë∆∞·ª£c ch·ªçn
        let selectedCommands = [];

        // L·∫•y danh s√°ch c√°c l·ªánh thu·ªôc nh√≥m ch·ªß ƒë·ªÅ ƒë√£ ch·ªçn
        selectedGroup.cmds.forEach(cmdName => {
            let commandConfig = commands.get(cmdName)?.config;
            if (commandConfig) {
                selectedCommands.push({
                    name: cmdName,
                    description: commandConfig.description
                });
            }
        });

        // Hi·ªÉn th·ªã c√°c l·ªánh trong ch·ªß ƒë·ªÅ ƒë∆∞·ª£c ch·ªçn
        let msg = `===== ùêãùêûÃ£ÃÇùêßùê° ùêÇùê°ùêÆÃâ ƒêùêûÃÇÃÄ: ${selectedGroup.group.toUpperCase()} =====\n`;
        selectedCommands.forEach((cmd, index) => {
            msg += `\n${index + 1}. ¬ª ${cmd.name}: ${cmd.description}`;
        });

        // Ki·ªÉm tra v√† l·∫•y video n·∫øu c√≥ t·ª´ global.khanhdayr
        let attachment = global.khanhdayr?.length > 0 ? global.khanhdayr.splice(0, 1) : null;

        // Th√™m th√¥ng tin chi ti·∫øt l·ªánh v√† video (n·∫øu c√≥)
        msg += `\n\n[üß∏] ùóïùóÆÃ£ùóª ùó∞ùóºÃÅ ùòÅùóµùó≤ÃÇÃâ ùó±ùòÇÃÄùóªùó¥ ${prefix}ùó∫ùó≤ùóªùòÇ ùóÆùóπùóπ ƒëùó≤ÃÇÃâ ùòÖùó≤ùó∫ ùòÅùëéÃÇÃÅùòÅ ùó∞ùóÆÃâ ùóπùó≤ÃÇÃ£ùóªùóµ`;

        let msgData = { body: msg };
        if (attachment) {
            msgData.attachment = attachment;  // ƒê√≠nh k√®m video t·ª´ global.khanhdayr n·∫øu c√≥
        }

        // G·ª≠i tin nh·∫Øn v√† ti·∫øp t·ª•c x·ª≠ l√Ω reply ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªçn s·ªë th·ª© t·ª± l·ªánh
        return api.sendMessage(msgData, event.threadID, (error, info) => {
            global.client.handleReply.push({
                type: "cmd_info",
                name: this.config.name,
                messageID: info.messageID,
                content: selectedCommands.map(cmd => cmd.name)
            });
        });
    }

    // N·∫øu ng∆∞·ªùi d√πng reply s·ªë th·ª© t·ª± c·ªßa l·ªánh trong ch·ªß ƒë·ªÅ
    if (handleReply.type === "cmd_info") {
        let num = parseInt(event.body.trim());
        if (isNaN(num) || num <= 0 || num > handleReply.content.length) {
            return api.sendMessage({
                body: "ùó¶ùóºÃÇÃÅ ùóØùóÆÃ£ùóª ùó∞ùóµùóºÃ£ùóª ùó∏ùóµùóºÃÇùóªùó¥ ùóªùóÆÃÜÃÄùó∫ ùòÅùóøùóºùóªùó¥ ùó±ùóÆùóªùóµ ùòÄùóÆÃÅùó∞ùóµ, ùòÉùòÇùó∂ ùóπùóºÃÄùóªùó¥ ùòÅùóµùòÇÃõÃâ ùóπùóÆÃ£ùó∂!!",
                attachment: global.khanhdayr.splice(0, 1)
            }, event.threadID);
        }

        const selectedCmd = handleReply.content[num - 1]; // L·ªánh ƒë∆∞·ª£c ch·ªçn
        const { commands } = global.client;
        const commandConfig = commands.get(selectedCmd)?.config;

        if (!commandConfig) {
            return api.sendMessage({
                body: "ùêãùêûÃ£ÃÇùêßùê° ùêäùê°ùê®ÃÇùêßùê† ùêìùê®ÃÇÃÄùêß ùêìùêöÃ£ùê¢!!",
                attachment: global.khanhdayr.splice(0, 1)
            }, event.threadID);
        }

        let msg = `üîπ ùóßùó≤ÃÇùóª ùóπùó≤Ã£ÃÇùóªùóµ: ${selectedCmd}`;
        msg += `\nüìñ ùó†ùóºÃÇ ùòÅùóÆÃâ: ${commandConfig.description}`;
        msg += `\nüõ† ùóñùóÆÃÅùó∞ùóµ ùó±ùòÇÃÄùóªùó¥: ${commandConfig.usages || "Kh√¥ng c√≥ h∆∞·ªõng d·∫´n"}`;
        msg += `\n‚è≥ ùóßùóµùóºÃõÃÄùó∂ ùó¥ùó∂ùóÆùóª ùó∞ùóµùóºÃõÃÄ: ${commandConfig.cooldowns || 5}s`;
        msg += `\nüî∞ ùó§ùòÇùòÜùó≤ÃÇÃÄùóª ùóµùóÆÃ£ùóª: ${commandConfig.hasPermssion == 0 ? "Ng∆∞·ªùi d√πng" : commandConfig.hasPermssion == 1 ? "Qu·∫£n tr·ªã vi√™n nh√≥m" : "Qu·∫£n tr·ªã vi√™n bot"}`;
        msg += `\nüí° ùóñùê®ùó±ùó≤ ùóØùòÜ: ${commandConfig.credits}`;

        // Ki·ªÉm tra v√† l·∫•y video n·∫øu c√≥ t·ª´ global.khanhdayr
        let attachment = global.khanhdayr?.length > 0 ? global.khanhdayr.splice(0, 1) : null;
        let msgData = { body: msg };

        if (attachment) msgData.attachment = attachment;  // ƒê√≠nh k√®m video n·∫øu c√≥

        return api.sendMessage(msgData, event.threadID);
    }
};

module.exports.run = async function ({ api, event, args }) {
    const { commands } = global.client;
    const { threadID } = event;
    const prefix = global.config.PREFIX;
    let msg = "=====„Äé ùó†ùóòùó°ùó® ùóñùó¢ùó†ùó†ùóîùó°ùóó „Äè=====\n";
    
    // Ki·ªÉm tra v√† l·∫•y video n·∫øu c√≥ t·ª´ global.khanhdayr
    let attachment = global.khanhdayr?.length > 0 ? global.khanhdayr.splice(0, 1) : null;
    let commandList = [];

    if (args[0] === "all" || args[0] === "-a") {
        // Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c l·ªánh
        msg = "=====„Äé ùó†ùóòùó°ùó® ùóßùóîÃÇÃÅùóß ùóñùóîÃâ ùóüùóòÃ£ÃÇùó°ùóõ „Äè=====\n";
        let count = 0;

        commands.forEach((cmd, name) => {
            msg += `\n${++count}. ¬ª ${name}: ${cmd.config.description}`;
            commandList.push(name);
        });

        msg += `\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n ${commands.size} ùê•ùêûÃ£ÃÇùêßùê°\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ `;
        msg += `\n[üß∏] ùóïùóÆÃ£ùóª ùó∞ùóºÃÅ ùòÅùóµùó≤ÃÇÃâ ùó±ùòÇÃÄùóªùó¥ ${prefix}ùó∫ùó≤ùóªùòÇ ùóÆùóπùóπ ƒëùó≤ÃÇÃâ ùòÖùó≤ùó∫ ùòÅùòÅùóÆÃÇÃÅùóç ùó∞ùóÆÃâ ùóπùó≤ÃÇÃ£ùóªùóµ`;

        // G·ª≠i tin nh·∫Øn v√† x·ª≠ l√Ω reply ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªçn s·ªë th·ª© t·ª± l·ªánh
        let msgData = { body: msg };
        if (attachment) msgData.attachment = attachment;

        return api.sendMessage(msgData, threadID, (error, info) => {
            global.client.handleReply.push({
                type: "cmd_info",
                name: this.config.name,
                messageID: info.messageID,
                content: commandList
            });
        });
    } else {
        let group = [];
        // Nh√≥m c√°c l·ªánh theo ch·ªß ƒë·ªÅ
        commands.forEach(cmd => {
            let category = cmd.config.commandCategory.toLowerCase();
            let cmdName = cmd.config.name;

            let groupObj = group.find(item => item.group === category);
            if (!groupObj) {
                group.push({ group: category, cmds: [cmdName] });
            } else {
                groupObj.cmds.push(cmdName);
            }
        });

        // Hi·ªÉn th·ªã c√°c ch·ªß ƒë·ªÅ
        group.forEach((groupItem, index) => {
            msg += `\n${index + 1}. ¬ª ${groupItem.group.toUpperCase()} ¬´`;
        });

        msg += `\n\n[üß∏] ùóïùóÆÃ£ùóª ùó∞ùóºÃÅ ùòÅùóµùó≤ÃÇÃâ ùó±ùòÇÃÄùóªùó¥ ${prefix}ùó∫ùó≤ùóªùòÇ ùóÆùóπùóπ ƒëùó≤ÃÇÃâ ùòÖùó≤ùó∫ ùòÅùòÅùóÆÃÇÃÅùóç ùó∞ùóÆÃâ ùóπùó≤ÃÇÃ£ùóªùóµ`;
        msg += `\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n ${commands.size} ùê•ùêûÃ£ÃÇùêßùê°\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ `;
        msg += `\n[üíì] ùêáùêöÃÉùê≤ ùê´ùêûùê©ùê•ùê≤ (ùê©ùê°ùêöÃâùêß ùê°ùê®ÃÇÃÄùê¢) ùêíùêìùêì ùêúùêÆÃâùêö ùêúùê°ùêÆÃâ ƒëùêûÃÇÃÄ ƒëùêûÃÇÃâ ùê±ùêûùê¶ ùêúùêöÃÅùêú ùê•ùêûÃ£ÃÇùêßùê° ùê≠ùê´ùê®ùêßùê† ùêúùê°ùêÆÃâ ƒëùêûÃÇÃÄ ùêßùêöÃÄùê®`;

        // G·ª≠i tin nh·∫Øn v√† x·ª≠ l√Ω reply cho ng∆∞·ªùi d√πng ch·ªçn nh√≥m ch·ªß ƒë·ªÅ
        let msgData = { body: msg };
        if (attachment) msgData.attachment = attachment;

        return api.sendMessage(msgData, threadID, (error, info) => {
            global.client.handleReply.push({
                type: "cmd_group",
                name: this.config.name,
                messageID: info.messageID,
                content: group
            });
        });
    }
};
